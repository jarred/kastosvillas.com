// Generated by CoffeeScript 1.6.2
(function() {
  var KV;

  KV = window.KastosVillas = {};

  KV.Views = {};

  KV.App = {
    init: function() {
      _.bindAll(this, 'setWindowHeight', 'extendViews');
      this.appModel = new Backbone.Model();
      $(window).on('resize', this.setWindowHeight);
      this.setWindowHeight();
      return this.extendViews();
    },
    setWindowHeight: function() {
      var h;

      h = $(window).height();
      return $('.window-height').css({
        'height': "" + h + "px"
      });
    },
    extendViews: function() {
      var _this = this;

      return _.each($('.js-extend'), function(el) {
        var $el, name, view;

        $el = $(el);
        name = $el.data('view');
        if (name === null || name === '') {
          return;
        }
        if (KV.Views[name] === void 0) {
          return;
        }
        view = new KV.Views[name]({
          el: el,
          appModel: _this.appModel
        });
        return $el.removeClass('js-extend');
      });
    }
  };

  KV.Views.MapView = Backbone.View.extend({
    initialize: function(o) {
      var googleLayer;

      this.o = o;
      _.bindAll(this, 'setZoom');
      this.map = L.map('map', {
        scrollWheelZoom: false,
        center: [38.5646649, 20.905957400000034],
        zoom: 3
      });
      googleLayer = new L.Google('SATELLITE');
      this.map.addLayer(googleLayer);
      return this.o.appModel.bind('change-step', this.setZoom);
    },
    setZoom: function(z) {
      console.log('setZoom', arguments);
      return this.map.setZoom(3 + (z * 1), {
        animate: true
      });
    }
  });

  KV.Views.NavView = Backbone.View.extend({
    step: 0,
    currentStep: 0,
    initialize: function(o) {
      this.o = o;
      _.bindAll(this, 'scroll', 'setup');
      this.setup();
      $(document).bind('scroll', this.scroll);
      return $(window).on('resize', this.setup);
    },
    scroll: function() {
      var r, totalSteps, y;

      y = $(document).scrollTop();
      totalSteps = 13;
      r = y / (this.windowH * 2);
      this.step = Math.floor(r * totalSteps);
      if (this.step > totalSteps) {
        this.step = totalSteps;
      }
      if (this.step < 0) {
        this.step = 0;
      }
      console.log(this.step);
      if (this.currentStep !== this.step) {
        this.currentStep = this.step;
        this.o.appModel.trigger('change-step', this.currentStep);
        if (this.currentStep >= (totalSteps / 2)) {
          $("#fixed-nav").removeClass('hide');
          $("#fixed-nav").css({
            opacity: 0
          });
          return TweenMax.to($('#fixed-nav'), 1, {
            opacity: 1,
            ease: Quint.easeOut
          });
        } else {
          return $("#fixed-nav").addClass('hide');
        }
      }
    },
    setup: function() {
      return this.windowH = $(window).height();
    }
  });

}).call(this);
